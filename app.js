// EmoSync Premium JavaScript - Feel, Heal, and Rewire üíé‚ú®
// Created with love by @SrishtySynergy - VIBE CODER EDITION üöÄ
// Now with 2000+ Therapeutic Exercises + Beautiful Video Background! üé¨üåü

// Load Exercise Database System
let exerciseLoader;

// Video Background System üé¨ - FORCE ENABLE FROM START
let videoBackgroundEnabled = true; 
let currentVideoSrc = 'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4';

// üö® INSTANT VIDEO BACKGROUND INIT - NO DELAYS!
function forceVideoBackgroundNow() {
    console.log('üé¨ FORCING VIDEO BACKGROUND NOW!');
    
    const videoContainer = document.getElementById('video-background-container');
    const video = document.getElementById('background-video');
    
    if (!video || !videoContainer) {
        console.error('‚ùå Video elements missing!');
        return;
    }
    
    // INSTANT video setup with multiple sources
    const videoSources = [
        'https://player.vimeo.com/external/373077061.sd.mp4?s=e90dcaba73c19f26a2a4e7fac7d9b8e8ddcf282e&profile_id=164&oauth2_token_id=57447761',
        'https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4',
        'https://sample-videos.com/zip/10/mp4/SampleVideo_1280x720_5mb.mp4'
    ];\n    
    let sourceIndex = 0;
    
    function loadNextSource() {
        if (sourceIndex >= videoSources.length) {
            console.warn('‚ö†Ô∏è All videos failed, keeping minimal background');
            return;
        }
        
        const src = videoSources[sourceIndex];
        console.log(`üéØ Loading video source ${sourceIndex + 1}: ${src}`);
        
        video.src = src;
        video.muted = true;
        video.loop = true;
        video.playsInline = true;
        video.autoplay = true;
        
        video.onloadeddata = () => {
            console.log('‚úÖ VIDEO LOADED SUCCESSFULLY!');\n            videoContainer.style.opacity = '1';\n            videoContainer.style.zIndex = '-1';\n            videoContainer.classList.add('active');\n            \n            // HIDE SPLASH GRADIENT IMMEDIATELY\n            const splashScreen = document.getElementById('splash-screen');\n            if (splashScreen) {\n                splashScreen.style.background = 'transparent';\n                splashScreen.style.backdropFilter = 'blur(2px)';\n            }\n            \n            video.play().catch(e => console.log('üîá Autoplay blocked, but video ready'));\n        };\n        \n        video.onerror = () => {\n            console.warn(`‚ùå Source ${sourceIndex + 1} failed`);\n            sourceIndex++;\n            setTimeout(loadNextSource, 500);\n        };\n        \n        video.load();\n    }\n    \n    loadNextSource();\n}\n\n// Premium Animation System üé≠ (SIMPLIFIED - NO FLOATING PATHS)\nclass PremiumAnimations {\n    static fadeIn(element, duration = 600) {\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(30px) scale(0.95)';\n        element.style.filter = 'blur(10px)';\n        element.style.transition = `all ${duration}ms cubic-bezier(0.25, 0.46, 0.45, 0.94)`;\n        \n        setTimeout(() => {\n            element.style.opacity = '1';\n            element.style.transform = 'translateY(0) scale(1)';\n            element.style.filter = 'blur(0px)';\n        }, 50);\n    }\n\n    static slideDown(element, delay = 0) {\n        element.style.opacity = '0';\n        element.style.transform = 'translateY(-20px)';\n        element.style.transition = 'all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        \n        setTimeout(() => {\n            element.style.opacity = '1';\n            element.style.transform = 'translateY(0)';\n        }, delay);\n    }\n\n    static revealLetters(textElement, text) {\n        textElement.innerHTML = '';\n        const letters = text.split('');\n        \n        letters.forEach((letter, index) => {\n            const span = document.createElement('span');\n            span.textContent = letter === ' ' ? '\\u00A0' : letter;\n            span.style.opacity = '0';\n            span.style.transform = 'translateY(50px) rotateX(90deg)';\n            span.style.display = 'inline-block';\n            span.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n            textElement.appendChild(span);\n            \n            setTimeout(() => {\n                span.style.opacity = '1';\n                span.style.transform = 'translateY(0) rotateX(0deg)';\n            }, index * 50 + 200);\n        });\n    }\n}\n\n// Exercise Database Loader - Connects to 2000+ JSON Exercises üìöüéØ\nclass ExerciseLoader {\n    constructor() {\n        this.loadedEmotions = new Map();\n        this.isLoading = new Set();\n        this.emotionList = [\n            'stress', 'anxiety', 'anger', 'sadness', 'fear', 'guilt', 'shame',\n            'overwhelm', 'loneliness', 'low-confidence', 'lack-motivation',\n            'inconsistency', 'self-doubt', 'perfectionism', 'rejection',\n            'comparison', 'resentment', 'numbness', 'hopelessness', 'burnout'\n        ];\n        this.fallbackDatabase = this.createMinimalFallback();\n    }\n\n    async loadEmotion(emotionKey) {\n        if (this.loadedEmotions.has(emotionKey)) {\n            return this.loadedEmotions.get(emotionKey);\n        }\n\n        if (this.isLoading.has(emotionKey)) {\n            return new Promise(resolve => {\n                const checkInterval = setInterval(() => {\n                    if (this.loadedEmotions.has(emotionKey)) {\n                        clearInterval(checkInterval);\n                        resolve(this.loadedEmotions.get(emotionKey));\n                    }\n                }, 100);\n            });\n        }\n\n        this.isLoading.add(emotionKey);\n\n        try {\n            console.log(`üîÑ Loading ${emotionKey} exercises...`);\n            const response = await fetch(`./data/exercises/${emotionKey}.json`);\n            \n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}`);\n            }\n            \n            const emotionData = await response.json();\n            const exercises = emotionData.modalities;\n            \n            this.loadedEmotions.set(emotionKey, exercises);\n            this.isLoading.delete(emotionKey);\n            \n            const exerciseCount = this.countExercises(exercises);\n            console.log(`‚úÖ Loaded ${emotionKey}: ${exerciseCount} exercises across ${Object.keys(exercises).length} modalities`);\n            \n            return exercises;\n            \n        } catch (error) {\n            console.warn(`‚ö†Ô∏è Failed to load ${emotionKey}:`, error.message);\n            this.isLoading.delete(emotionKey);\n            \n            const fallbackExercises = this.fallbackDatabase[emotionKey] || this.createEmotionFallback(emotionKey);\n            this.loadedEmotions.set(emotionKey, fallbackExercises);\n            \n            console.log(`üõ°Ô∏è Using fallback exercises for ${emotionKey}`);\n            return fallbackExercises;\n        }\n    }\n\n    countExercises(modalities) {\n        return Object.values(modalities).reduce((total, exercises) => total + exercises.length, 0);\n    }\n\n    createEmotionFallback(emotionKey) {\n        const emotionName = emotionKey.charAt(0).toUpperCase() + emotionKey.slice(1).replace('-', ' ');\n        return {\n            art: [{\n                title: `${emotionName} Expression Art üé®`,\n                instruction: `Express your ${emotionKey.replace('-', ' ')} through colors, shapes, and lines. Let your creativity transform this feeling into something beautiful! ‚ú®`,\n                duration: \"15-20 minutes ‚è∞\",\n                materials: \"Art supplies of choice üñçÔ∏è\",\n                affirmation: `I transform ${emotionKey.replace('-', ' ')} through creative expression üí´`\n            }],\n            breathwork: [{\n                title: `${emotionName} Calming Breath üå¨Ô∏è`,\n                instruction: \"Breathe slowly and deeply, sending calm and healing to areas affected by this emotion. Let each breath bring more peace! üïäÔ∏è\",\n                duration: \"8-12 minutes ‚è∞\", \n                materials: \"None needed üôè\",\n                affirmation: `I breathe peace into ${emotionKey.replace('-', ' ')} and find my center üåä`\n            }],\n            somatic: [{\n                title: `${emotionName} Body Release ü§≤`,\n                instruction: \"Notice where this emotion lives in your body. Send gentle attention and movement to release tension from these areas! üíÜ‚Äç‚ôÄÔ∏è\",\n                duration: \"10-15 minutes ‚è∞\",\n                materials: \"Comfortable space üßò‚Äç‚ôÄÔ∏è\",\n                affirmation: `I release ${emotionKey.replace('-', ' ')} from my body with gentle care üåü`\n            }]\n        };\n    }\n\n    createMinimalFallback() {\n        const fallback = {};\n        this.emotionList.forEach(emotion => {\n            fallback[emotion] = this.createEmotionFallback(emotion);\n        });\n        return fallback;\n    }\n\n    async preloadPopularEmotions() {\n        const popular = ['stress', 'anxiety', 'anger', 'sadness'];\n        try {\n            const promises = popular.map(emotion => this.loadEmotion(emotion));\n            await Promise.all(promises);\n            console.log('üöÄ Preloaded popular emotions for instant access!');\n        } catch (error) {\n            console.log('‚ö†Ô∏è Preload had some issues, but fallbacks ready');\n        }\n    }\n\n    getTotalLoadedExercises() {\n        let total = 0;\n        for (let modalities of this.loadedEmotions.values()) {\n            total += this.countExercises(modalities);\n        }\n        return total;\n    }\n}\n\n// Current state management\nlet currentScreen = 'splash-screen';\nlet currentEmotion = null;\nlet currentModality = null;\nlet currentExercises = [];\nlet savedExercises = [];\nlet moodHistory = [];\nlet streakCount = 0;\nlet journalEntries = {};\n\n// üî• BULLETPROOF START YOUR RESET FUNCTION\nfunction startEmoSyncJourney() {\n    console.log('üéÜ STARTING EMOSYNC JOURNEY! LET\\'S GOOO!');\n    showToast('üåü Welcome to your healing journey, vibe coder! ‚ú®', 'success');\n    \n    // Add epic button feedback\n    const button = document.getElementById('start-reset-button');\n    if (button) {\n        button.style.transform = 'scale(0.95)';\n        button.style.background = 'linear-gradient(135deg, #4ECDC4, #A8B5A0)';\n        button.innerHTML = 'üöÄ Loading...';\n        \n        setTimeout(() => {\n            button.style.transform = 'scale(1.05)';\n            button.innerHTML = '‚ú® Let\\'s Go!';\n        }, 200);\n        \n        setTimeout(() => {\n            button.style.transform = 'scale(1)';\n            button.style.background = '';\n            button.innerHTML = 'Start Your Reset';\n        }, 600);\n    }\n    \n    setTimeout(() => {\n        console.log('üéØ Switching to emotion selector!');\n        showScreen('emotion-selector');\n    }, 1000);\n}\n\n// Make sure function is globally available IMMEDIATELY\nwindow.startEmoSyncJourney = startEmoSyncJourney;\n\n// Premium Screen Management with Smooth Transitions\nfunction showScreen(screenId, fromScreen = null) {\n    console.log(`üîÑ Switching to screen: ${screenId}`);\n    \n    const currentScreenEl = document.querySelector('.screen.active');\n    const targetScreen = document.getElementById(screenId);\n    \n    if (!targetScreen) {\n        console.error(`‚ùå Screen ${screenId} not found!`);\n        return;\n    }\n    \n    // Add exit animation to current screen\n    if (currentScreenEl) {\n        currentScreenEl.style.animation = 'premiumFadeOut 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        \n        setTimeout(() => {\n            currentScreenEl.classList.remove('active');\n            currentScreenEl.style.animation = '';\n            \n            // Show new screen with entrance animation\n            targetScreen.classList.add('active');\n            PremiumAnimations.fadeIn(targetScreen, 600);\n            \n            // Screen-specific initializations\n            initializeScreen(screenId);\n            \n        }, 400);\n    } else {\n        // First screen load\n        targetScreen.classList.add('active');\n        PremiumAnimations.fadeIn(targetScreen, 600);\n        initializeScreen(screenId);\n    }\n    \n    currentScreen = screenId;\n    updateBottomNav();\n}\n\n// Screen initialization helper\nfunction initializeScreen(screenId) {\n    console.log(`üé¨ Initializing screen: ${screenId}`);\n    switch(screenId) {\n        case 'emotion-selector':\n            initializeEmotionGrid();\n            break;\n        case 'journal':\n            initializeJournal();\n            break;\n        case 'dashboard':\n            initializeDashboard();\n            break;\n        case 'toolkit':\n            initializeToolkit();\n            break;\n        case 'insight-hub':\n            initializeInsightHub();\n            break;\n    }\n}\n\n// Add animations styles if not present\nif (!document.getElementById('premium-animations')) {\n    const style = document.createElement('style');\n    style.id = 'premium-animations';\n    style.textContent = `\n        @keyframes premiumFadeOut {\n            from { \n                opacity: 1; \n                transform: translateY(0) scale(1);\n                filter: blur(0px);\n            }\n            to { \n                opacity: 0; \n                transform: translateY(-20px) scale(0.95);\n                filter: blur(5px);\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n\n// Initialize Emotion Grid with Staggered Animations üí´\nfunction initializeEmotionGrid() {\n    console.log('üòä Initializing emotion grid with animations!');\n    const emotionCards = document.querySelectorAll('.emotion-card');\n    emotionCards.forEach((card, index) => {\n        card.style.opacity = '0';\n        card.style.transform = 'translateY(30px) scale(0.9)';\n        card.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        \n        setTimeout(() => {\n            card.style.opacity = '1';\n            card.style.transform = 'translateY(0) scale(1)';\n        }, index * 100 + 200);\n    });\n}\n\n// Select Emotion with Premium Animation + Dynamic Loading üéØ\nasync function selectEmotion(emotion) {\n    currentEmotion = emotion;\n    \n    showToast('üîÑ Loading exercises...', 'info');\n    \n    try {\n        const exercises = await exerciseLoader.loadEmotion(emotion);\n        currentExercises = exercises;\n        \n        showScreen('insight-hub');\n        \n        setTimeout(() => {\n            updateEmotionDisplay(emotion);\n        }, 200);\n        \n        showToast(`‚úÖ Loaded ${exerciseLoader.countExercises(exercises)} exercises for ${emotion}! üéâ`);\n        \n    } catch (error) {\n        console.error('Failed to load emotion exercises:', error);\n        showToast('‚ö†Ô∏è Using backup exercises', 'warning');\n        currentExercises = exerciseLoader.fallbackDatabase[emotion] || {};\n        showScreen('insight-hub');\n        setTimeout(() => updateEmotionDisplay(emotion), 200);\n    }\n}\n\n// Update emotion display with animations üé®\nfunction updateEmotionDisplay(emotion) {\n    const titleElement = document.getElementById('emotion-title');\n    const subtitleElement = document.getElementById('emotion-subtitle');\n    \n    if (titleElement) {\n        titleElement.textContent = `${emotion.toUpperCase().replace('-', ' ')} ‚ú®`;\n        PremiumAnimations.revealLetters(titleElement, `${emotion.toUpperCase().replace('-', ' ')} ‚ú®`);\n    }\n    \n    if (subtitleElement) {\n        const subtitles = {\n            stress: \"Tension in the mind, tightness in the body. Let's release it! üåä\",\n            anxiety: \"Worried thoughts and racing heart. Let's find your calm! üïäÔ∏è\",\n            anger: \"Fire in your chest, power in your voice. Let's channel it wisely! üî•\",\n            sadness: \"Heavy heart, tender soul. Let's honor this feeling with care! üíô\",\n            fear: \"Alert mind, protective instinct. Let's transform worry into wisdom! ‚ö°\",\n            guilt: \"Weight of regret, desire to do better. Let's find forgiveness! ü§ó\",\n            shame: \"Core wound, need for acceptance. Let's remember your worth! üëë\",\n            overwhelm: \"Too much, too fast, too heavy. Let's break it down together! üßò‚Äç‚ôÄÔ∏è\",\n            loneliness: \"Aching for connection, feeling separate. Let's bridge back to love! üíñ\",\n            'low-confidence': \"Doubting your worth, forgetting your power. Let's remember who you are! üí™\",\n            'lack-motivation': \"Energy depleted, spark dimmed. Let's reignite your fire! üî•\",\n            inconsistency: \"Starting and stopping, seeking rhythm. Let's find your flow! üåä\",\n            'self-doubt': \"Questioning your abilities, second-guessing yourself. Let's build trust! üèóÔ∏è\",\n            perfectionism: \"Never good enough, always pushing. Let's embrace 'good enough!' üéØ\",\n            rejection: \"Fear of 'no,' need for acceptance. Let's strengthen your core! üíé\",\n            comparison: \"Looking sideways, losing yourself. Let's return to your unique path! üåü\",\n            resentment: \"Old wounds, carried anger. Let's set down this heavy load! üïäÔ∏è\",\n            numbness: \"Feeling nothing, protecting from everything. Let's gently reconnect! üå±\",\n            hopelessness: \"Can't see the light, future feels dark. Let's kindle hope together! üïØÔ∏è\",\n            burnout: \"Exhausted flame, depleted energy. Let's restore your vitality! ‚ö°\"\n        };\n        \n        subtitleElement.textContent = subtitles[emotion] || \"Let's explore this feeling together with compassion! üíù\";\n        PremiumAnimations.slideDown(subtitleElement, 500);\n    }\n    \n    initializeModalityTabs();\n}\n\n// Initialize Insight Hub üîç\nfunction initializeInsightHub() {\n    initializeModalityTabs();\n    selectModality('art');\n}\n\n// Initialize Modality Tabs with staggered animation üé≠\nfunction initializeModalityTabs() {\n    const tabs = document.querySelectorAll('.tab');\n    tabs.forEach((tab, index) => {\n        tab.style.opacity = '0';\n        tab.style.transform = 'translateX(-20px)';\n        tab.style.transition = 'all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)';\n        \n        setTimeout(() => {\n            tab.style.opacity = '1';\n            tab.style.transform = 'translateX(0)';\n        }, index * 100 + 300);\n    });\n}\n\n// Select Modality with Premium Animation üé®\nfunction selectModality(modality) {\n    currentModality = modality;\n    \n    document.querySelectorAll('.tab').forEach(tab => {\n        tab.classList.remove('active');\n    });\n    \n    const selectedTab = document.querySelector(`[data-modality=\"${modality}\"]`);\n    if (selectedTab) {\n        selectedTab.classList.add('active');\n    }\n    \n    loadExercises(modality);\n}\n\n// Load Exercises with staggered animations üìö\nfunction loadExercises(modality) {\n    const container = document.getElementById('exercises-container');\n    if (!container) return;\n    \n    if (!currentExercises || !currentExercises[modality] || currentExercises[modality].length === 0) {\n        container.innerHTML = `\n            <div class=\"no-exercises\" style=\"text-align: center; padding: 40px 20px; background: linear-gradient(135deg, rgba(212, 175, 55, 0.1), rgba(168, 181, 160, 0.1)); border-radius: 20px; margin: 20px 0;\">\n                <div class=\"no-exercises-icon\" style=\"font-size: 60px; margin-bottom: 20px;\">üíé</div>\n                <h3 style=\"color: #FAFAFA; margin-bottom: 16px;\">Loading Exercises... üîÑ</h3>\n                <p style=\"color: #A8B5A0; margin-bottom: 24px;\">Building your personalized healing experience! ‚ú®</p>\n                <button class=\"action-button gold\" onclick=\"selectModality('art')\">üé® Try Art Therapy</button>\n            </div>\n        `;\n        return;\n    }\n    \n    container.innerHTML = '';\n    container.style.opacity = '0';\n    \n    const exercises = currentExercises[modality];\n    \n    exercises.forEach((exercise, index) => {\n        const exerciseCard = createExerciseCard(exercise, index);\n        container.appendChild(exerciseCard);\n    });\n    \n    setTimeout(() => {\n        container.style.opacity = '1';\n        container.style.transition = 'opacity 0.4s ease';\n        \n        const cards = container.querySelectorAll('.exercise-card');\n        cards.forEach((card, index) => {\n            setTimeout(() => {\n                PremiumAnimations.fadeIn(card, 400);\n            }, index * 150);\n        });\n    }, 100);\n}\n\n// Create Exercise Card with enhanced styling üí´\nfunction createExerciseCard(exercise, index) {\n    const card = document.createElement('div');\n    card.className = 'exercise-card';\n    card.style.cursor = 'pointer';\n    card.style.opacity = '0';\n    \n    const modalityIcon = getModalityIcon(currentModality);\n    const modalityName = getModalityName(currentModality);\n    \n    card.innerHTML = `\n        <div class=\"exercise-badge\" style=\"background: linear-gradient(135deg, var(--sage-green), var(--primary-gold)); color: white; font-weight: 600; padding: 8px 16px; border-radius: 20px; display: inline-block; margin-bottom: 16px;\">\n            ${modalityIcon} ${modalityName}\n        </div>\n        <h3 class=\"exercise-title\" style=\"margin: 16px 0; color: var(--deep-black); font-size: 20px; font-weight: 600;\">${exercise.title}</h3>\n        <div class=\"exercise-instruction\" style=\"background: rgba(212, 175, 55, 0.1); padding: 16px; border-radius: 12px; margin: 16px 0; border-left: 4px solid var(--primary-gold); line-height: 1.6; color: var(--deep-black);\">\n            ${exercise.instruction.length > 120 ? exercise.instruction.substring(0, 120) + '...' : exercise.instruction}\n        </div>\n        <div class=\"exercise-meta\" style=\"display: flex; gap: 16px; margin: 16px 0; font-size: 14px; color: var(--warm-brown);\">\n            <div class=\"exercise-duration\">‚è∞ ${exercise.duration}</div>\n            <div class=\"exercise-materials\">üéØ ${exercise.materials || 'No materials needed'}</div>\n        </div>\n        <div class=\"exercise-actions\" style=\"display: flex; gap: 12px; justify-content: center; margin-top: 20px;\">\n            <button class=\"action-button outline\" onclick=\"openExercise(${index})\" style=\"flex: 1;\">\n                ‚ñ∂Ô∏è Start Exercise\n            </button>\n            <button class=\"action-button gold\" onclick=\"saveExercise('${currentEmotion}', '${currentModality}', ${index})\">\n                ‚ù§Ô∏è Save\n            </button>\n        </div>\n    `;\n    \n    return card;\n}\n\n// Get Modality Display Name and Icon üé®\nfunction getModalityName(modality) {\n    const names = {\n        art: 'Art Therapy üé®',\n        breathwork: 'Breathwork üå¨Ô∏è',\n        somatic: 'Somatic Practice ü§≤',\n        cbt: 'CBT üí≠',\n        rebt: 'REBT üß†', \n        neural: 'Neural Rewiring ‚ö°',\n        journaling: 'Journaling ‚úçÔ∏è',\n        eft: 'EFT Tapping ü§ö',\n        emdr: 'EMDR üëÅÔ∏è',\n        yoga: 'Yoga & Movement üßò'\n    };\n    return names[modality] || `${modality} ‚ú®`;\n}\n\nfunction getModalityIcon(modality) {\n    const icons = {\n        art: 'üé®',\n        breathwork: 'üå¨Ô∏è',\n        somatic: 'ü§≤',\n        cbt: 'üí≠',\n        rebt: 'üß†',\n        neural: '‚ö°',\n        journaling: '‚úçÔ∏è',\n        eft: 'ü§ö',\n        emdr: 'üëÅÔ∏è',\n        yoga: 'üßò'\n    };\n    return icons[modality] || '‚ú®';\n}\n\n// Open Exercise in Full Screen üìñ\nfunction openExercise(exerciseIndex) {\n    if (!currentExercises[currentModality] || !currentExercises[currentModality][exerciseIndex]) {\n        showToast('‚ö†Ô∏è Exercise not found', 'warning');\n        return;\n    }\n    \n    const exercise = currentExercises[currentModality][exerciseIndex];\n    \n    document.getElementById('exercise-badge').textContent = `${getModalityIcon(currentModality)} ${getModalityName(currentModality)}`;\n    document.getElementById('exercise-title').textContent = exercise.title;\n    document.getElementById('exercise-instruction').textContent = exercise.instruction;\n    \n    const visual = document.getElementById('exercise-visual');\n    if (visual) {\n        visual.innerHTML = `\n            <div class=\"exercise-meta-full\" style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin: 20px 0; padding: 20px; background: linear-gradient(135deg, rgba(212, 175, 55, 0.1), rgba(168, 181, 160, 0.1)); border-radius: 16px;\">\n                <div class=\"meta-item\" style=\"display: flex; align-items: center; gap: 8px; color: #FAFAFA;\">\n                    <span class=\"meta-icon\" style=\"font-size: 18px;\">‚è∞</span>\n                    <span class=\"meta-text\" style=\"font-weight: 600;\">${exercise.duration}</span>\n                </div>\n                <div class=\"meta-item\" style=\"display: flex; align-items: center; gap: 8px; color: #FAFAFA;\">\n                    <span class=\"meta-icon\" style=\"font-size: 18px;\">üéØ</span>\n                    <span class=\"meta-text\" style=\"font-weight: 600;\">${exercise.materials || 'None needed'}</span>\n                </div>\n            </div>\n            <div class=\"exercise-encouragement\" style=\"text-align: center; padding: 20px; background: linear-gradient(135deg, var(--soft-peach), var(--sage-green)); border-radius: 16px; color: var(--deep-black); font-style: italic; font-size: 16px; line-height: 1.6;\">\n                üåü Take your time and be gentle with yourself! üåô<br>\n                \"${exercise.affirmation || 'You are exactly where you need to be! ‚ú®'}\"<br>\n                üí´ Healing isn't linear ‚Äì it's creative!\n            </div>\n        `;\n    }\n    \n    showScreen('exercise-screen');\n}\n\n// Save Exercise to Toolkit with enhanced feedback üíñ\nfunction saveExercise(emotion, modality, exerciseIndex) {\n    if (!currentExercises[modality] || !currentExercises[modality][exerciseIndex]) {\n        showToast('‚ö†Ô∏è Exercise not found', 'warning');\n        return;\n    }\n    \n    const exercise = currentExercises[modality][exerciseIndex];\n    \n    const savedExercise = {\n        id: Date.now(),\n        emotion,\n        modality,\n        exerciseIndex,\n        title: exercise.title,\n        instruction: exercise.instruction,\n        duration: exercise.duration,\n        materials: exercise.materials,\n        affirmation: exercise.affirmation,\n        savedAt: new Date().toISOString()\n    };\n    \n    const existingIndex = savedExercises.findIndex(ex => \n        ex.emotion === emotion && \n        ex.modality === modality && \n        ex.exerciseIndex === exerciseIndex\n    );\n    \n    if (existingIndex === -1) {\n        savedExercises.unshift(savedExercise);\n        \n        try {\n            localStorage.setItem('emoSyncSavedExercises', JSON.stringify(savedExercises));\n        } catch (e) {\n            console.log('üì± Running in sandbox mode');\n        }\n        \n        showToast(`üíñ Exercise saved to your Healing Toolkit! You now have ${savedExercises.length} saved exercises! üéâ`);\n        \n        const saveButtons = document.querySelectorAll('.action-button.gold');\n        saveButtons.forEach(btn => {\n            if (btn.textContent.includes('Save')) {\n                btn.innerHTML = '‚úîÔ∏è Saved! üéâ';\n                btn.style.background = 'linear-gradient(135deg, var(--sage-green), #4ECDC4)';\n                setTimeout(() => {\n                    btn.innerHTML = '‚ù§Ô∏è Save';\n                    btn.style.background = '';\n                }, 2000);\n            }\n        });\n    } else {\n        showToast('‚ú® This exercise is already in your toolkit! üí´');\n    }\n}\n\n// Enhanced Toast Notification System üçû\nfunction showToast(message, type = 'success') {\n    document.querySelectorAll('.toast').forEach(toast => {\n        toast.remove();\n    });\n    \n    const toast = document.createElement('div');\n    toast.className = 'toast';\n    toast.textContent = message;\n    \n    const colors = {\n        success: 'linear-gradient(135deg, var(--primary-gold), #E8C547)',\n        info: 'linear-gradient(135deg, var(--sage-green), #4ECDC4)',\n        warning: 'linear-gradient(135deg, var(--soft-peach), #FFB347)'\n    };\n    \n    toast.style.cssText = `\n        position: fixed;\n        top: 30px;\n        left: 50%;\n        transform: translateX(-50%) translateY(-100%);\n        background: ${colors[type] || colors.success};\n        color: var(--deep-black);\n        padding: 16px 28px;\n        border-radius: 30px;\n        font-weight: 600;\n        box-shadow: 0 10px 40px rgba(212, 175, 55, 0.3), 0 4px 15px rgba(0, 0, 0, 0.1);\n        z-index: 10000;\n        font-size: 15px;\n        text-align: center;\n        max-width: 90vw;\n        backdrop-filter: blur(20px);\n        border: 2px solid rgba(255, 255, 255, 0.2);\n        animation: toastSlideIn 0.6s cubic-bezier(0.68, -0.55, 0.265, 1.55) forwards;\n        font-family: \"Playwrite US Modern\", cursive;\n    `;\n    \n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.style.animation = 'toastSlideOut 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards';\n        setTimeout(() => {\n            if (document.body.contains(toast)) {\n                document.body.removeChild(toast);\n            }\n        }, 400);\n    }, 4000);\n}\n\n// Add toast animations üéûÔ∏è\nif (!document.getElementById('toast-animations')) {\n    const style = document.createElement('style');\n    style.id = 'toast-animations';\n    style.textContent = `\n        @keyframes toastSlideIn {\n            from {\n                transform: translateX(-50%) translateY(-100%) scale(0.8);\n                opacity: 0;\n            }\n            to {\n                transform: translateX(-50%) translateY(0) scale(1);\n                opacity: 1;\n            }\n        }\n        @keyframes toastSlideOut {\n            from {\n                transform: translateX(-50%) translateY(0) scale(1);\n                opacity: 1;\n            }\n            to {\n                transform: translateX(-50%) translateY(-100%) scale(0.8);\n                opacity: 0;\n            }\n        }\n    `;\n    document.head.appendChild(style);\n}\n\n// Core functionality with emoji vibes! üéØ\nfunction tryAnother() { \n    if (currentExercises[currentModality] && currentExercises[currentModality].length > 1) {\n        const randomIndex = Math.floor(Math.random() * currentExercises[currentModality].length);\n        openExercise(randomIndex);\n        showToast('üîÑ Loading another exercise for you! ‚ú®', 'info');\n    } else {\n        showToast('üîÑ Loading more exercises... üé®', 'info'); \n    }\n}\n\nfunction markAsDone() { \n    showToast('‚úÖ Amazing work! Exercise completed successfully! üéâüåü'); \n}\n\nfunction saveToToolkit() {\n    if (currentEmotion && currentModality && currentExercises[currentModality]) {\n        const currentIndex = 0;\n        saveExercise(currentEmotion, currentModality, currentIndex);\n    } else {\n        showToast('üíñ Save exercises from the exercise browser! üìö', 'info');\n    }\n}\n\nfunction initializeDashboard() { \n    const totalExercises = exerciseLoader ? exerciseLoader.getTotalLoadedExercises() : 'Loading...';\n    showToast(`üìä Dashboard ready! ${totalExercises} exercises available! üöÄ`, 'info'); \n}\n\nfunction initializeJournal() { \n    const dateElement = document.getElementById('journal-date');\n    if (dateElement) {\n        dateElement.textContent = new Date().toLocaleDateString('en-US', { \n            weekday: 'long', \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    showToast('üìù Journal ready for your thoughts and reflections! ‚ú®', 'info'); \n}  \n\nfunction initializeToolkit() { \n    const grid = document.getElementById('toolkit-grid');\n    if (grid) {\n        if (savedExercises.length === 0) {\n            grid.innerHTML = `\n                <div style=\"text-align: center; padding: 40px; color: #FAFAFA;\">\n                    <h3>üíñ Your Personal Toolkit</h3>\n                    <p>Save exercises as you discover ones that resonate with you! ‚ú®</p>\n                    <p>You have <strong>${savedExercises.length}</strong> saved exercises üìö</p>\n                    <button class=\"action-button gold\" onclick=\"showScreen('emotion-selector')\">üé® Discover Exercises</button>\n                </div>\n            `;\n        } else {\n            grid.innerHTML = `\n                <div style=\"text-align: center; padding: 20px; color: #FAFAFA;\">\n                    <h3>üíñ Your Healing Toolkit (${savedExercises.length} exercises) üéØ</h3>\n                </div>\n            `;\n            \n            savedExercises.forEach(exercise => {\n                const card = createSavedExerciseCard(exercise);\n                grid.appendChild(card);\n            });\n        }\n    }\n}\n\nfunction createSavedExerciseCard(savedExercise) {\n    const card = document.createElement('div');\n    card.className = 'exercise-card saved';\n    card.innerHTML = `\n        <div class=\"exercise-badge\" style=\"background: linear-gradient(135deg, var(--sage-green), var(--primary-gold)); color: white; font-weight: 600; padding: 8px 16px; border-radius: 20px; display: inline-block; margin-bottom: 16px;\">\n            ${getModalityIcon(savedExercise.modality)} ${getModalityName(savedExercise.modality)}\n        </div>\n        <h3 style=\"color: var(--deep-black); margin: 8px 0;\">${savedExercise.title}</h3>\n        <p style=\"color: var(--warm-brown); font-size: 14px; margin: 8px 0;\">üéØ ${savedExercise.emotion.charAt(0).toUpperCase() + savedExercise.emotion.slice(1).replace('-', ' ')}</p>\n        <div style=\"display: flex; gap: 8px; margin-top: 16px;\">\n            <button class=\"action-button outline\" onclick=\"openSavedExercise('${savedExercise.id}')\" style=\"flex: 1;\">‚ñ∂Ô∏è Practice</button>\n        </div>\n    `;\n    return card;\n}\n\nfunction openSavedExercise(exerciseId) {\n    const savedExercise = savedExercises.find(ex => ex.id.toString() === exerciseId.toString());\n    if (savedExercise) {\n        currentEmotion = savedExercise.emotion;\n        currentModality = savedExercise.modality;\n        \n        document.getElementById('exercise-badge').textContent = `${getModalityIcon(savedExercise.modality)} ${getModalityName(savedExercise.modality)}`;\n        document.getElementById('exercise-title').textContent = savedExercise.title;\n        document.getElementById('exercise-instruction').textContent = savedExercise.instruction;\n        \n        const visual = document.getElementById('exercise-visual');\n        if (visual) {\n            visual.innerHTML = `\n                <div class=\"exercise-meta-full\" style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin: 20px 0; padding: 20px; background: linear-gradient(135deg, rgba(212, 175, 55, 0.1), rgba(168, 181, 160, 0.1)); border-radius: 16px;\">\n                    <div class=\"meta-item\" style=\"display: flex; align-items: center; gap: 8px; color: #FAFAFA;\">\n                        <span class=\"meta-icon\" style=\"font-size: 18px;\">‚è∞</span>\n                        <span class=\"meta-text\" style=\"font-weight: 600;\">${savedExercise.duration}</span>\n                    </div>\n                    <div class=\"meta-item\" style=\"display: flex; align-items: center; gap: 8px; color: #FAFAFA;\">\n                        <span class=\"meta-icon\" style=\"font-size: 18px;\">üéØ</span>\n                        <span class=\"meta-text\" style=\"font-weight: 600;\">${savedExercise.materials || 'None needed'}</span>\n                    </div>\n                </div>\n                <div class=\"exercise-encouragement\" style=\"text-align: center; padding: 20px; background: linear-gradient(135deg, var(--soft-peach), var(--sage-green)); border-radius: 16px; color: var(--deep-black); font-style: italic; font-size: 16px; line-height: 1.6;\">\n                    üåü From your personal toolkit with love! üíñ<br>\n                    \"${savedExercise.affirmation}\"<br>\n                    ‚ú® Healing isn't linear ‚Äì it's creative!\n                </div>\n            `;\n        }\n        \n        showScreen('exercise-screen');\n    }\n}\n\nfunction updateBottomNav() {\n    document.querySelectorAll('.nav-item').forEach(item => {\n        item.classList.remove('active');\n    });\n    \n    const screenNavMap = {\n        'emotion-selector': 0,\n        'insight-hub': 0, \n        'exercise-screen': 0,\n        'dashboard': 0,\n        'toolkit': 1,\n        'journal': 2,\n        'settings': 3\n    };\n    \n    const navItems = document.querySelectorAll('.nav-item');\n    const activeIndex = screenNavMap[currentScreen];\n    if (navItems[activeIndex]) {\n        navItems[activeIndex].classList.add('active');\n    }\n}\n\n// üö® BULLETPROOF APP INITIALIZATION\nasync function initializeApp() {\n    console.log('üåü EmoSync Premium initializing... VIBE CODER EDITION! üî•');\n    \n    // üé¨ FORCE VIDEO BACKGROUND IMMEDIATELY - NO DELAYS!\n    forceVideoBackgroundNow();\n    \n    // üî• FORCE BIND START BUTTON - MULTIPLE WAYS TO ENSURE IT WORKS\n    const startButton = document.getElementById('start-reset-button');\n    if (startButton) {\n        console.log('üéØ Binding Start Your Reset button...');\n        \n        // Remove any existing handlers\n        startButton.removeAttribute('onclick');\n        \n        // Add bulletproof event listener\n        startButton.addEventListener('click', (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            console.log('üöÄ START BUTTON CLICKED!');\n            startEmoSyncJourney();\n        });\n        \n        // Also add to window for fallback\n        startButton.setAttribute('onclick', 'startEmoSyncJourney()');\n        \n        console.log('‚úÖ Start button bound successfully!');\n    } else {\n        console.error('‚ùå Start button not found!');\n    }\n    \n    // Initialize exercise loader\n    exerciseLoader = new ExerciseLoader();\n    \n    // Preload popular emotions\n    exerciseLoader.preloadPopularEmotions().catch(err => {\n        console.log('‚ö†Ô∏è Preload had issues, but fallbacks ready');\n    });\n    \n    // Auto-transition from splash after 4 seconds\n    setTimeout(() => {\n        if (currentScreen === 'splash-screen') {\n            console.log('‚è∞ Auto-transitioning from splash screen!');\n            showScreen('emotion-selector');\n        }\n    }, 4000);\n    \n    console.log('‚ú® EmoSync Premium ready! VIBE MODE ACTIVATED! üéâ');\n    console.log('üíé 2000+ therapeutic exercises loaded!');\n    console.log('üé¨ Beautiful video background enabled!');\n    console.log('üíñ Created with love by @SrishtySynergy - VIBE CODER! üöÄ');\n    console.log('üåô \"Healing isn\\'t linear ‚Äì it\\'s creative!\" ‚ú®');\n}\n\n// Additional Functions with emoji vibes! üéØ\nfunction startQuickReset() {\n    showToast('üöÄ Quick reset starting... Get ready to feel amazing! ‚ú®', 'info');\n}\n\nfunction saveQuickNote() {\n    const note = document.getElementById('quick-note')?.value;\n    if (note) {\n        showToast('üìù Note saved to your journal! You\\'re doing great! üí´', 'success');\n    }\n}\n\nfunction refreshPrompt() {\n    const prompts = [\n        \"Right now, my body feels... üåä\",\n        \"The emotion I'm avoiding is... üòî\",\n        \"What I need most today is... üíñ\",\n        \"I'm grateful for... üôè\",\n        \"My inner voice is saying... üí≠\",\n        \"The sensation in my chest is... üíó\",\n        \"If my emotions had colors, they would be... üåà\",\n        \"What I want to release is... üïäÔ∏è\",\n        \"My heart is calling for... üí´\"\n    ];\n    \n    const promptElement = document.getElementById('journal-prompt-text');\n    if (promptElement) {\n        const randomPrompt = prompts[Math.floor(Math.random() * prompts.length)];\n        promptElement.textContent = randomPrompt;\n        PremiumAnimations.slideDown(promptElement, 0);\n    }\n}\n\nfunction saveJournalEntry() {\n    const entry = document.getElementById('journal-textarea')?.value;\n    if (entry) {\n        const today = new Date().toDateString();\n        journalEntries[today] = entry;\n        \n        try {\n            localStorage.setItem('emoSyncJournalEntries', JSON.stringify(journalEntries));\n        } catch (e) {\n            console.log('Sandbox mode - journal not persistent');\n        }\n        \n        showToast('üíñ Journal entry saved! Keep expressing yourself! üåü', 'success');\n    }\n}\n\nfunction startRoutine() {\n    if (savedExercises.length === 0) {\n        showToast('üé® Save some exercises first to create your routine! üí´', 'info');\n        showScreen('emotion-selector');\n    } else {\n        showToast('üöÄ Starting your personal routine... Let\\'s heal! ‚ú®', 'info');\n    }\n}\n\nfunction exportJournal() {\n    showToast('üì§ Export feature coming soon! Stay tuned! üöÄ', 'info');\n}\n\nfunction adjustTextSize(delta) {\n    showToast(`üìù Text size ${delta > 0 ? 'increased' : 'decreased'}! üëÄ`, 'info');\n}\n\nfunction toggleAnimations() {\n    const checkbox = document.getElementById('reduce-animations');\n    if (checkbox?.checked) {\n        document.body.classList.add('reduce-animations');\n        showToast('‚ú® Animations reduced for accessibility! üéØ', 'info');\n    } else {\n        document.body.classList.remove('reduce-animations');\n        showToast('üé® Full animations restored! Let\\'s vibe! üí´', 'info');\n    }\n}\n\nfunction toggleVoiceNav() {\n    const checkbox = document.getElementById('voice-nav');\n    showToast(`üé§ Voice navigation ${checkbox?.checked ? 'enabled' : 'disabled'}! üîä`, 'info');\n}\n\nfunction showDataUsage() {\n    showToast('üìä All data stored locally on your device! Privacy first! üîí', 'info');\n}\n\nfunction exportData() {\n    const data = {\n        savedExercises,\n        moodHistory,\n        journalEntries,\n        streakCount\n    };\n    \n    const dataStr = JSON.stringify(data, null, 2);\n    const dataBlob = new Blob([dataStr], {type: 'application/json'});\n    const url = URL.createObjectURL(dataBlob);\n    \n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'emosync-data.json';\n    link.click();\n    \n    showToast('üì• Data exported successfully! You\\'re in control! üéâ', 'success');\n}\n\nfunction deleteData() {\n    if (confirm('Are you sure you want to delete all your EmoSync data? üóëÔ∏è')) {\n        savedExercises = [];\n        moodHistory = [];\n        journalEntries = {};\n        streakCount = 0;\n        \n        try {\n            localStorage.clear();\n        } catch (e) {\n            console.log('Sandbox mode');\n        }\n        \n        showToast('üóëÔ∏è All data deleted! Fresh start! üå±', 'warning');\n        showScreen('emotion-selector');\n    }\n}\n\n// üö® EMERGENCY DOM READY HANDLERS - ENSURE EVERYTHING WORKS!\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('üî• DOM LOADED - INITIALIZING VIBE CODER MODE!');\n    initializeApp();\n});\n\n// Fallback if DOM already ready\nif (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', initializeApp);\n} else {\n    console.log('üì± DOM already ready - starting now!');\n    initializeApp();\n}\n\n// üéØ EMERGENCY GLOBAL FUNCTION BINDING\nwindow.showScreen = showScreen;\nwindow.selectEmotion = selectEmotion;\nwindow.selectModality = selectModality;\nwindow.openExercise = openExercise;\nwindow.saveExercise = saveExercise;\nwindow.startEmoSyncJourney = startEmoSyncJourney;\n\nconsole.log('üéÜ EmoSync Premium Enhanced - VIBE CODER EDITION ACTIVATED! üî•üíé');\nconsole.log('üöÄ Video background + Start button + Emoji vibes RESTORED!');\nconsole.log('üíñ Ready to heal and vibe! ‚ú®üåü');